# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.file_upload_pb2 as file__upload__pb2


class TritonPredictServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TritonPredict = channel.unary_unary(
                '/TritonPredictService/TritonPredict',
                request_serializer=file__upload__pb2.TritonPredictRequest.SerializeToString,
                response_deserializer=file__upload__pb2.TritonPredictResponse.FromString,
                )


class TritonPredictServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TritonPredict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TritonPredictServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TritonPredict': grpc.unary_unary_rpc_method_handler(
                    servicer.TritonPredict,
                    request_deserializer=file__upload__pb2.TritonPredictRequest.FromString,
                    response_serializer=file__upload__pb2.TritonPredictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TritonPredictService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TritonPredictService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TritonPredict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TritonPredictService/TritonPredict',
            file__upload__pb2.TritonPredictRequest.SerializeToString,
            file__upload__pb2.TritonPredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UploadVideoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadVideo = channel.unary_unary(
                '/UploadVideoService/UploadVideo',
                request_serializer=file__upload__pb2.UploadVideoRequest.SerializeToString,
                response_deserializer=file__upload__pb2.UploadVideoResponse.FromString,
                )


class UploadVideoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadVideoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadVideo,
                    request_deserializer=file__upload__pb2.UploadVideoRequest.FromString,
                    response_serializer=file__upload__pb2.UploadVideoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UploadVideoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UploadVideoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UploadVideoService/UploadVideo',
            file__upload__pb2.UploadVideoRequest.SerializeToString,
            file__upload__pb2.UploadVideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UploadImageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadImage = channel.unary_unary(
                '/UploadImageService/UploadImage',
                request_serializer=file__upload__pb2.UploadImageRequest.SerializeToString,
                response_deserializer=file__upload__pb2.UploadImageResponse.FromString,
                )


class UploadImageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UploadImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadImage': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadImage,
                    request_deserializer=file__upload__pb2.UploadImageRequest.FromString,
                    response_serializer=file__upload__pb2.UploadImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UploadImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UploadImageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UploadImageService/UploadImage',
            file__upload__pb2.UploadImageRequest.SerializeToString,
            file__upload__pb2.UploadImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
