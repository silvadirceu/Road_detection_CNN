version: '3'

services:
  gui:
    image: road-detection-gui:${VERSION}
    container_name: gui
    build:
      context: ./gui
    ports:
      - ${COMPUTER_VISION_GUI_PORT}:80
    env_file:
      - .env
    networks:
      - road_detection_network

  computer-vision:
    image: road-detection-computer-vision:${VERSION}
    container_name: ${COMPUTER_VISION_SERVICE}
    build:
      context: ./computer-vision
    ports:
      - ${COMPUTER_VISION_PORT}:8080
    env_file:
      - .env
    networks:
      - road_detection_network

  # stream:
  #   build:
  #     context: ./stream
  #   ports:
  #     - "8181:8181"
  #   networks:
  #    - road_detection_network

  triton-server:
    image: nvcr.io/nvidia/tritonserver:23.12-py3
    container_name: ${TRITON_SERVICE}
    volumes:
      - ${TRITON_MODEL_PATH}:/models
    ports:
      - ${TRITON_HTTP_PORT}:8000
      - ${TRITON_GRPC_PORT}:8001
      - ${TRITON_METRICS_PORT}:8002
    command:
      - tritonserver
      - --model-repository=/models
      - --backend-config=tensorflow,version=2
    networks:
      - road_detection_network

  rabbitmq:
    container_name: rabbitmq
    hostname: ${RABBITMQ_SERVER}
    image: "rabbitmq:3.7-management"
    restart: always
    ports:
      - ${RABBITMQ_PORT}:5672
      - ${RABBITMQ_ADMIN_PORT}:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - road_detection_network

  flower:
    image: mher/flower
    container_name: flower
    environment:
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_SERVER}:${RABBITMQ_PORT}
      CELERY_RESULT_BACKEND: rpc://
      FLOWER_PORT: ${FLOWER_PORT}
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    depends_on:
      - rabbitmq
      # - gui
    networks:
      - road_detection_network

networks:
  road_detection_network:
    driver: bridge